name: Build and Release

on:
  push:
    tags:
      - "[0-9]*.[0-9]*.[0-9]**"

jobs:
  build_and_release:
    name: 'Build and Release'
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 17  # Spring 3 needs at least java 17
          distribution: temurin
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build artifacts
        run: |
          ./gradlew assemble bootJarWithFrontend -PbuildVersion=${{ github.ref_name }}
          mkdir artifacts
          cp ./inspectit-ocelot-agent/build/inspectit-ocelot-agent-${{ github.ref_name }}.jar ./artifacts
          cp ./components/inspectit-ocelot-configurationserver/build/libs/inspectit-ocelot-configurationserver-${{ github.ref_name }}.jar ./artifacts
      - name: Prepare artifacts for Docker
        run: /gradlew :inspectit-ocelot-agent:copyAgentJar :inspectit-ocelot-configurationserver:copyServerJar
      - name: Upload artifacts for Docker
        uses: actions/upload-artifact@v3
        with:
          name: docker-artifacts
          path: |
            inspectit-ocelot-agent/docker/inspectit-ocelot-agent.jar
            components/inspectit-ocelot-configurationserver/docker/inspectit-ocelot-configurationserver.jar

  # Build the docker images for multiple platforms and prepare for publishing
  # Check out: https://github.com/docker/build-push-action
  # And: https://docs.docker.com/build/ci/github-actions/multi-platform/
  build_docker_images:
    name: "Build Docker Images"
    runs-on: ubuntu-latest
    needs: build_and_release
    environment: release
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v6
          - linux/arm/v7
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug
        run: |
          ls -l
          ls -l inspectit-ocelot-agent
          ls -l inspectit-ocelot-agent/docker
          ls -l components/inspectit-ocelot-configurationserver
          ls -l components/inspectit-ocelot-configurationserver/docker

      - name: Build and push agent
        id: build-agent
        uses: docker/build-push-action@v6
        with:
          context: .
          file: inspectit-ocelot-agent/docker/Dockerfile
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=inspectit/inspectit-ocelot-agent,push-by-digest=true,name-canonical=true,push=true
      - name: Export digest agent
        run: |
          mkdir -p ${{ runner.temp }}/digests-agent
          digest="${{ steps.build-agent.outputs.digest }}"
          touch "${{ runner.temp }}/digests-agent/${digest#sha256:}"
      - name: Upload digest agent
        uses: actions/upload-artifact@v4
        with:
          name: digests-agent-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests-agent/*
          if-no-files-found: error
          retention-days: 1

      - name: Build and push configurationserver
        id: build-configurationserver
        uses: docker/build-push-action@v6
        with:
          context: .
          file: components/inspectit-ocelot-configurationserver/docker/Dockerfile
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=inspectit/inspectit-ocelot-configurationserver,push-by-digest=true,name-canonical=true,push=true
      - name: Export digest configurationserver
        run: |
          mkdir -p ${{ runner.temp }}/digests-configurationserver
          digest="${{ steps.build-configurationserver.outputs.digest }}"
          touch "${{ runner.temp }}/digests-configurationserver/${digest#sha256:}"

      - name: Upload digest configurationserver
        uses: actions/upload-artifact@v4
        with:
          name: digests-configurationserver-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests-configurationserver/*
          if-no-files-found: error
          retention-days: 1

  # Merge the prepared docker images and publish to DockerHub
  merge_and_publish_docker_images:
    name: "Merge and Publish Docker Images"
    runs-on: ubuntu-latest
    environment: release
    needs: build_docker_images
    steps:
      - name: Download digests agent
        uses: actions/download-artifact@v4
        with:
          name: digests-agent-*
          path: ${{ runner.temp }}/digests-agent
          pattern: digests-agent-*
          merge-multiple: true
      - name: Download digests for configurationserver
        uses: actions/download-artifact@v4
        with:
          name: digests-configurationserver-*
          path: ${{ runner.temp }}/digests-configurationserver
          pattern: digests-configurationserver-*
          merge-multiple: true

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta agent
        id: meta-agent
        uses: docker/metadata-action@v5
        with:
          images: inspectit/inspectit-ocelot-agent
          tags: |
            type=ref,event=tag
            type=raw,value=latest
      - name: Docker meta configurationserver
        id: meta-configurationserver
        uses: docker/metadata-action@v5
        with:
          images: inspectit/inspectit-ocelot-configurationserver
          tags: |
            type=ref,event=tag
            type=raw,value=latest

      - name: Push agent
        working-directory: ${{ runner.temp }}/digests-agent
        run: |
          docker buildx imagetools create ${{ steps.meta-agent.outputs.tags }} \
          $(printf 'inspectit/inspectit-ocelot-agent@sha256:%s ' *)
      - name: Inspect manifest agent
        run: |
          docker buildx imagetools inspect inspectit/inspectit-ocelot-agent:${{ github.ref_name }}

      - name: Push configurationserver
        working-directory: ${{ runner.temp }}/digests-configurationserver
        run: |
          docker buildx imagetools create ${{ steps.meta-configurationserver.outputs.tags }} \
            $(printf 'inspectit/inspectit-ocelot-configurationserver@sha256:%s ' *)
      - name: Inspect manifest configurationserver
        run: |
          docker buildx imagetools inspect inspectit/inspectit-ocelot-configurationserver:${{ github.ref_name }}
